alias pid R5;
alias usp R6;
alias pte R7;
alias retr R9;
alias syscall R8;
alias wpid R10;
//func ltv uses R14 and R15 and returns R1


//these are dummy variables
alias i R12;
alias j R13;


print("in11");
usp = SP;
pid = [SYSTEM_STATUS_TABLE + 1];
pte = PROCESS_TABLE + pid*16;

[pte+13] = SP;
SP = [pte+11]*512-1;


//usp - 1 is ret
//usp - 2 is arg3
//usp - 3 is arg2
//usp - 4 is arg1
//usp - 5 is funcode
//getpid - 11, getppid - 12, wait is 13 and signal is 14

//extract the func code and ret address
R14 = usp - 5;
R15 = pid;
call ltv;
syscall = [R1];
print("this is func code");
print([R1]);
R14 = usp - 1;
R15 = pid;
call ltv;
retr = R1;


//getppod
if(syscall == INT_GETPID) then 
    [pte+9] = 11;
    [retr] = [pte+1];
    SP = usp;
    ireturn;
endif;

//getpid
if(syscall == INT_GETPPID) then
    [pte+9] = 12;
    [retr] = [pte+2];
    SP = usp;
    ireturn;
endif;

//wait systemcall
//wait takes the pid as the argument
if(syscall == 13) then
    [pte+9] = 13;
    R14 = usp -4;
    R15 = pid;
    call ltv;
    wpid = [R1];
    print("calpid");
    print(wpid);
    // A process should not wait for itself or a TERMINATED process. The argument PID should be in valid range
    if((wpid == pid) || (wpid < 1) || (wpid > 15) || ([PROCESS_TABLE + wpid*16 + 4] == TERMINATED)) then
        print("notsupposed");
        [retr] = -1;
        [pte+9] = 0;
        SP = usp;
        ireturn;
    endif;
    //its a tuple state -  4 and 5
    [pte + 4] = WAIT_PROCESS;
    [pte + 5] = wpid;
    print("here");
    backup;
    call CONTEXT_SWITCH;
    restore;
    [retr] = 0;
    [pte + 9] = 0;
    SP = usp;
    print("done");
    ireturn;
endif;

//signal systemcall
if(syscall == 14) then
    print("insignal");
    [pte+9] = 14;
    i = 0;
    while(i < 16) do
        if(([PROCESS_TABLE + i*16 + 4] == WAIT_PROCESS) && ([PROCESS_TABLE + i*16 + 5] == pid)) then
            [PROCESS_TABLE + i*16 + 4] = READY;
        endif;

        i = i + 1;
    endwhile;
    [retr] = 0;
    SP = usp;
    [pte + 9] = 0;
    ireturn;
    
endif;

ltv:
    i = R14/512;
    i = [PAGE_TABLE_BASE + R15*20 + 2*i];
    R1 = (i*512) + (R14%512);
    return;