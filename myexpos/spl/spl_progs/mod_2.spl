//Memory Manager
//print "MOD 2";
alias funcno R1;
alias i R4;
if( funcno==GET_FREE_PAGE ) then

    [SYSTEM_STATUS_TABLE+3]=[SYSTEM_STATUS_TABLE+3]+1;
    while( [SYSTEM_STATUS_TABLE+2]==0 ) do
        [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4]=WAIT_MEM;
        backup;
        call MOD_5;
        restore;
    endwhile ;
    [SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1;
    [SYSTEM_STATUS_TABLE+3]=[SYSTEM_STATUS_TABLE+3]-1;
    //print "Get page1";
    i=76;

    while( i<128 ) do
        if( [MEMORY_FREE_LIST+i]==0 ) then
            R0=i;
            [MEMORY_FREE_LIST+i]=1;
            //print i;
            return;
        else
            i=i+1;
        endif ;
    endwhile ;
endif ;

if( RELEASE_PAGE==funcno ) then
    //print "release page";
    [MEMORY_FREE_LIST+R2]=[MEMORY_FREE_LIST+R2]-1;
    if( [MEMORY_FREE_LIST+R2]==0 ) then
        [SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]+1;
    endif ;

    i=0;

    while( i<16 ) do
        if( [PROCESS_TABLE + i * 16 + 4]== WAIT_MEM ) then
            [PROCESS_TABLE + i * 16 + 4]=READY;
            i=i+1;
        else
            i=i+1;
        endif ;
    endwhile ;
    return;
endif ;


if( funcno== GET_CODE_PAGE ) then
    //print "get code pg";
    i=0;
    alias blno R2;
    while( i<16 ) do
        if( [DISK_MAP_TABLE+(i*10)+4]==blno &&([PAGE_TABLE_BASE+(20*i)+8]!=-1)) then
            [MEMORY_FREE_LIST+[PAGE_TABLE_BASE+(20*i)+8]]=[MEMORY_FREE_LIST+[PAGE_TABLE_BASE+(20*i)+8]]+1;
            R0=[PAGE_TABLE_BASE+(20*i)+8];
            return;
        endif ;
        if(  [DISK_MAP_TABLE+(i*10)+5]==blno &&([PAGE_TABLE_BASE+(20*i)+10]!=-1)) then
            [MEMORY_FREE_LIST+[PAGE_TABLE_BASE+(20*i)+10]]=[MEMORY_FREE_LIST+[PAGE_TABLE_BASE+(20*i)+10]]+1;
            R0=[PAGE_TABLE_BASE+(20*i)+10];
            return;
        endif ;
        if(  [DISK_MAP_TABLE+(i*10)+6]==blno &&([PAGE_TABLE_BASE+(20*i)+12]!=-1)) then
            [MEMORY_FREE_LIST+[PAGE_TABLE_BASE+(20*i)+12]]=[MEMORY_FREE_LIST+[PAGE_TABLE_BASE+(20*i)+12]]+1;
            R0=[PAGE_TABLE_BASE+(20*i)+12];
            return;
        endif ;
        if(  [DISK_MAP_TABLE+(i*10)+7]==blno &&([PAGE_TABLE_BASE+(20*i)+14]!=-1)) then
            [MEMORY_FREE_LIST+[PAGE_TABLE_BASE+(20*i)+14]]=[MEMORY_FREE_LIST+[PAGE_TABLE_BASE+(20*i)+14]]+1;
            R0=[PAGE_TABLE_BASE+(20*i)+14];
            return;
        endif ;
        i=i+1;
    endwhile ;
    multipush(R0,R1,R2);
    R1=GET_FREE_PAGE;
    call MOD_2;
    R5=R0;
    multipop(R0,R1,R2);
    
    R6=blno;
    multipush(R0,R1,R2,R5);
    R1=DISK_LOAD;
    R2=[SYSTEM_STATUS_TABLE+1];
    R3=R5;
    R4=R6;
    call MOD_4;
    multipop(R0,R1,R2,R5);
    R0=R5;
    return;
endif ;

if( RELEASE_BLOCK==funcno ) then
    [DISK_FREE_LIST+R2]=[DISK_FREE_LIST+R2]-1;
    return;
else
    return;
endif ;