// R14 and R15 are for the memory translate and result is stored in R13
// i j and k are temp variables

alias i R10;


alias pid R4;
alias usp R5;
alias pcb R6;
alias sys R7;
//args: only 1 here i.e,. r8
alias arg1 R8;
alias retn R9;

usp = SP;
pid = [SYSTEM_STATUS_TABLE+1];
pcb = PROCESS_TABLE + pid*16;

[pcb + 13] = SP;
SP = [pcb+11]*512 -1;

R14 = usp - 5;
R15 = pid;
call ltv;
sys = [R13];

R14 = usp - 4;
R15 = pid;
call ltv;
arg1 = [R13];

R14 = usp - 1;
R15 = pid;
call ltv;
retn = R13;

if(sys == INT_SEMGET) then
    [pcb+9] = INT_SEMGET;
    ////print("insemget");
    alias rest R11;
    alias resi R12;
    alias semi R3;
    //----rest is per process resource table, and resi is the indexx
    rest = [pcb+11]*512 + RESOURCE_TABLE_OFFSET;
    resi = 0;
    while(resi < 8) do
        if([rest+2*resi] == -1) then 
            break;
        endif;
        resi = resi+1;
    endwhile;
    ////print("resisi");
    //print(resi);
    if (resi == 8) then
        [retn] = -1;
        [pcb+9] = 0;
        SP = [pcb + 13];
        ireturn;
    endif;

    multipush(R4, R5,R6,R7,R8,R9,R10,R11,R12,R3);
    R1 = ACQUIRE_SEMAPHORE;
    call RESOURCE_MANAGER;
    semi = R0;
    multipop(R4, R5,R6,R7,R8,R9,R10,R11,R12,R3);
    //print("semi");
    //print(semi);
    if(semi == -1) then
        [retn] = -2;
        [pcb+9] = 0;
        SP = [pcb + 13];
        ireturn;
    endif;
    
    [rest+resi*2+0] = SEMAPHORE;
    [rest+resi*2+1] = semi;
    [retn] = resi;
    [pcb+9] = 0;
    SP = [pcb + 13];
    ////print("resisi");
    ////print(resi);
    ireturn;
    

endif;

if(sys == INT_SEMRELEASE) then
    [pcb+9] =  18;
    alias rest R11;
    alias resi R12;
    alias semi R3;

    resi = arg1;
    rest = [pcb+11]*512 + RESOURCE_TABLE_OFFSET;
    if(resi < 0 || resi > 7 || [rest + resi*2] != SEMAPHORE )
    then
        [retn] = -1;
        [pcb+9] = 0;
        SP = [pcb + 13];
        ireturn;
    endif;
    semi = [rest+resi*2+1];
    multipush(R4, R5,R6,R7,R8,R9,R10,R11,R12,R3);
    R1 = RELEASE_SEMAPHORE;
    R2 = semi;
    call RESOURCE_MANAGER;
   // semi = R0;
    multipop(R4, R5,R6,R7,R8,R9,R10,R11,R12,R3);
    [rest+resi*2] =-1;
    [retn] = 0;
    [pcb+9] = 0;
    SP = [pcb + 13];
    ireturn;
endif;


ltv:
    i = R14/512;
    i = [PAGE_TABLE_BASE + R15*20 + 2*i];
    R13 = (i*512) + (R14%512);
    return;