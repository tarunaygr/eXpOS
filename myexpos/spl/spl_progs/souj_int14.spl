// R14 and R15 are for the memory translate and result is stored in R13
// i j and k are temp variables

alias i R10;


alias pid R4;
alias usp R5;
alias pcb R6;
alias sys R7;
//args: only 1 here i.e,. r8
alias arg1 R8;
alias retn R9;

// unused args
// userSP - 3 => arg2
// userSP - 2 => arg3

print "int14";
usp = SP;
pid = [SYSTEM_STATUS_TABLE+1];
pcb = PROCESS_TABLE + pid*16;

[pcb + 13] = SP;
SP = [pcb+11]*512 -1;

R14 = usp - 5;
R15 = pid;
call ltv;
sys = [R13];

R14 = usp - 4;
R15 = pid;
call ltv;
arg1 = [R13];
//print("arg1is");
breakpoint;
//print(arg1);


R14 = usp - 1;
R15 = pid;
call ltv;
retn = [R13];

backup;
    R0 = "INT 14 0";
    R1 = ACQUIRE_KERN_LOCK;
    call ACCESS_CONTROL;
    restore;

// semid is the arg 
if(sys == INT_SEMLOCK) then
    //print("insemlock");
    //print(arg1);
    [pcb + 9] = INT_SEMLOCK;
    alias rest R11;
    alias resi R12;
    alias semi R3;

    rest = [pcb+11]*512 + RESOURCE_TABLE_OFFSET;
    resi = arg1;
    //print(resi);
    if(resi < 0 || resi > 7 || [rest + resi*2] != SEMAPHORE )
    then
        backup;
    R0 = "INT 14 1";
    R1 = RELEASE_LOCK;
    R2 = KERN_LOCK;
    call ACCESS_CONTROL;
    restore;
        [retn] = -1;
        [pcb+9] = 0;
        SP = [pcb + 13];
        ireturn;
    endif;
    semi = [rest + resi*2 +1];
    //wait if the processis locked by someother process other than this do
    while([SEMAPHORE_TABLE + semi*4] != -1) do 
        // this will be unlocked when the other process is done using it
        [pcb+4] = WAIT_SEMAPHORE;
        //print("here?");
        [pcb+5] = semi;
        backup;
        R0 = "INT 14 A";
        R1 = RELEASE_LOCK;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
        restore;

        backup;
        call CONTEXT_SWITCH;
        restore;

        backup;
        R0 = "INT 14 B";
        R1 = ACQUIRE_KERN_LOCK;
        call ACCESS_CONTROL;
        restore;

    endwhile;
    [SEMAPHORE_TABLE+semi*4] = pid;
    backup;
    R0 = "INT 14 1";
    R1 = RELEASE_LOCK;
    R2 = KERN_LOCK;
    call ACCESS_CONTROL;
    restore;
        [retn] = 0;
        [pcb+9] = 0;
        SP = [pcb + 13];
        //print(resi);
        //print("semlockdone");
        ireturn;
endif;
// semid is the arg
//===================The sempahore will still be locked by the parent process. In Fork system call, the PROCESS COUNT in the semaphore table is incremented by one but LOCKING PID field is left untouched.
if(sys == INT_SEMUNLOCK) then
    //print("insemunlock");
    [pcb + 9] = INT_SEMUNLOCK;
    alias rest R11;
    alias resi R12;
    alias semi R3;

    rest = [pcb+11]*512 + RESOURCE_TABLE_OFFSET;
    resi = arg1;
    if(resi < 0 || resi > 7 || [rest + resi*2] != SEMAPHORE )
    then
        backup;
    R0 = "INT 14 1";
    R1 = RELEASE_LOCK;
    R2 = KERN_LOCK;
    call ACCESS_CONTROL;
    restore;
        [retn] = -1;
        [pcb+9] = 0;
        SP = [pcb + 13];
        ireturn;
    endif;
    semi = [rest + resi*2 +1];
    //---------if this is locked
    if([SEMAPHORE_TABLE + semi*4] != -1) then
        //--------------Semaphore was not locked by the calling process
        if([SEMAPHORE_TABLE + semi*4] != [SYSTEM_STATUS_TABLE + 1]) then
            [retn] = -2;
            backup;
            R0 = "INT 14 1";
            R1 = RELEASE_LOCK;
            R2 = KERN_LOCK;
            call ACCESS_CONTROL;
            restore;
            [pcb+9] = 0;
            SP = [pcb + 13];
            ireturn;
        endif;
        [SEMAPHORE_TABLE+semi*4] = -1;
        i = 0;
        while(i < 16) do
            if([PROCESS_TABLE+i*16+4] == WAIT_SEMAPHORE &&[PROCESS_TABLE+i*16+5] ==semi) then
                [PROCESS_TABLE+i*16 +4] = READY;

            endif;
        i = i+1;
        endwhile;
        backup;
        R0 = "INT 14 1";
        R1 = RELEASE_LOCK;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
        restore;
        [retn] = 0;
        [pcb+9] = 0;
        SP = [pcb + 13];
        ireturn;
    endif;
endif;
backup;
    R0 = "INT 14 1";
    R1 = RELEASE_LOCK;
    R2 = KERN_LOCK;
    call ACCESS_CONTROL;
    restore;
[pcb+9] = 0;
SP = [pcb+13];
ireturn;
ltv:
    i = R14/512;
    i = [PAGE_TABLE_BASE + R15*20 + 2*i];
    R13 = (i*512) + (R14%512);
    return;