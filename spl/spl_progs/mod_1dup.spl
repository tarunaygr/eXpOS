alias functionnum R1;
alias ret R0;
alias arg1 R2;

alias pid R10;

if(functionnum==FREE_USER_AREA_PAGE) then
    alias pte R11;
    pid = [SYSTEM_STATUS_TABLE+1];
    alias upage R12;
    pid = arg1;
    pte = PROCESS_TABLE+pid*16;
    upage = [pte+11];
    R1=RELEASE_PAGE;
    R2 = upage;
    call MEMORY_MANAGER;
    return;
endif;

if(functionnum == EXIT_PROCESS) then

    alias pte R11;
    pid = [SYSTEM_STATUS_TABLE+1];
    //exit such that it wakes up the processes waiting and set orphan processes -- mode flag != 9 (not from exec)
    alias i R7;
    i = 0;
    if([PROCESS_TABLE + pid*16 + 9] != 9) then
        i = 0;
        while(i < 16) do
            if(([PROCESS_TABLE + i*16 + 4] == WAIT_PROCESS) && ([PROCESS_TABLE + i*16 + 5] == pid)) then
                [PROCESS_TABLE + i*16 + 4] = READY;
            endif;
            if(([PROCESS_TABLE + i*16 + 2]) == pid) then
                [PROCESS_TABLE + i*16 + 2] = -1;
            endif;
            i = i + 1;
        endwhile;
    endif;

    functionnum = FREE_PAGE_TABLE;
    arg1 = pid;
    multipush(R11);
    call PROCESS_MANAGER;
    multipop(R11);
    
    functionnum = FREE_USER_AREA_PAGE;
    arg1 = pid;
    multipush(R11);
    call PROCESS_MANAGER;
    multipop(R11);
    //call PROCESS_MANAGER;
    
    pte = PROCESS_TABLE + pid*16;
    [pte+4] = TERMINATED;
    
    return;
endif;

if(functionnum == FREE_PAGE_TABLE) then
    alias pt R12;
    pid = R2;
    pt = PAGE_TABLE_BASE+pid*20;
    
    //free lib
    [pt+0] = -1;
    [pt+1] = "0000";
    [pt+2] = -1;
    [pt+3] = "0000";
    R13 = 2;
    while(R13 < 10) do
        if( [pt + (2*R13)] != -1) then
            R1 = RELEASE_PAGE;
            R2 = [pt+(2*R13)];
            call MEMORY_MANAGER;
            [pt+(2*R13)] = -1;
            [pt+(2*R13)+1] = "0000";
        endif;
        R13 = R13+1;
    endwhile;
    
    //free the disk map table 
    // first 2 are unused
    R13 = 2;
    while(R13 <= 9) do 
        if(R13 == 2 || R13 == 3 || R13 == 8 || R13 == 9) then
            if([DISK_MAP_TABLE+pid*10+R13] != -1) then
                R1 = RELEASE_BLOCK;
                R2 = [DISK_MAP_TABLE+pid*10+R13];
                call MEMORY_MANAGER;
            endif;
        endif;
    R13 = R13 + 1;
    endwhile;
    return;
endif;


//get pcb entry

if(functionnum == GET_PCB_ENTRY ) then
    alias i R10;
    alias pcbb R11;

    i = 0;
    while( i < MAX_PROC_NUM ) do
        pcbb = PROCESS_TABLE + i* 16;
        if([pcbb + 4] == TERMINATED) then 
            [pcbb + 1] = i;         //pid
            [pcbb + 4] = ALLOCATED; // state
            [pcbb + 14] = PAGE_TABLE_BASE + i*20;
            [pcbb + 15] = 10;
            R0 = i;
            print("Ingetpcb");
            print(R0);
            return;
        endif;
        i = i + 1;
    endwhile;
    R0 = -1;
    return;
endif;