//print "RESOURCE MANAGER";

alias functionNum R1;
alias currentPID R2;
alias process_table_entry R11;
process_table_entry = PROCESS_TABLE + currentPID * 16;
if( functionNum==ACQUIRE_TERMINAL ) then


    while( [TERMINAL_STATUS_TABLE]==1 ) do
        

        [process_table_entry + 4]= WAIT_TERMINAL;
        multipush(R0,R1,R2,R11);
        call MOD_5;//scheduler
        multipop(R0,R1,R2,R11);//Runs only the next time process is scheduled after Terminal is freed
        endwhile ;
        //print "TERM ACQ";
        [TERMINAL_STATUS_TABLE]=1;
        [TERMINAL_STATUS_TABLE+1]=currentPID;
        return;


endif ;

if( functionNum==RELEASE_TERMINAL ) then
//print "TERM RELEASE";
    if( currentPID==[TERMINAL_STATUS_TABLE+1] ) then
        [TERMINAL_STATUS_TABLE]=0;

        alias i R10;
        i=0;
        while( i<16 ) do
            process_table_entry = PROCESS_TABLE + i * 16;
            if( [process_table_entry+4]==WAIT_TERMINAL ) then
                [process_table_entry+4]=READY;
                i=i+1;
            else
                i=i+1;
            endif ;
        endwhile ;
        R0=0;
        return;
    else
        R0=-1;
        return ; //illegal attempt to release terminal
    endif ;
endif ;

if(functionNum==ACQUIRE_DISK) then

    while( [DISK_STATUS_TABLE]==1 ) do
        [process_table_entry+4]=WAIT_DISK;
        multipush(R0,R1,R2,R11);
        call MOD_5;
        multipop(R0,R1,R2,R11);
    endwhile ;
    [DISK_STATUS_TABLE]=1;//To indicate it is busy
    [DISK_STATUS_TABLE+4]=currentPID;//Save the pid of the process disk
    return;
endif;

if( functionNum==ACQUIRE_SEMAPHORE ) then
    //print "Acq Semaphore"; 
    alias i R4;
    i=0;
    while(i<MAX_SEM_COUNT)do   
        if([SEMAPHORE_TABLE + (4*i) +1]==0)then
            [SEMAPHORE_TABLE + (4*i) +1]=1;
            [SEMAPHORE_TABLE + (4*i) +0]=-1;
            
            R0=i;
            return;
        endif;
        i=i+1;
    endwhile;
    R0=-1;
    return;

endif;

if( functionNum==RELEASE_SEMAPHORE ) then
    //print "rel semaphore";
    alias semid R2;
    alias pid R3;
    if([SEMAPHORE_TABLE + 4*semid +0]==pid)then
        [SEMAPHORE_TABLE + 4*semid +0]=-1;
        alias i R4;
        i=0;
        while(i<MAX_PROC_NUM)do
            if([PROCESS_TABLE +(16*i) + 4]==WAIT_SEMAPHORE &&[PROCESS_TABLE +16*i + 5]==semid)then
                [PROCESS_TABLE +(16*i) + 4]=READY;
            endif;
            i=i+1;
        endwhile;
        

    endif;
    [SEMAPHORE_TABLE + 4*semid +1]=[SEMAPHORE_TABLE + 4*semid +1]-1;
    R0=0;
    return;
endif ;

if( functionNum==ACQUIRE_INODE ) then
    //print "acq inode";
    alias index R2;
    alias pid R3;

    while( [FILE_STATUS_TABLE +4*index] != -1 ) do
        
        [PROCESS_TABLE + (16*pid) + 4]= WAIT_FILE;
        [PROCESS_TABLE + (16*pid) + 5]= index;
        multipush(R0,R1,R2,R3);

        call MOD_5;//scheduler
       
        multipop(R0,R1,R2,R3);//Runs only the next time process is scheduled after Terminal is freed
        endwhile ;
        if( [INODE_TABLE + 16*index + 1]==-1 ) then
            R0=-1;
            return;
        endif ;
        [FILE_STATUS_TABLE +4*index]=pid;
        R0=0;
        return;
endif;

if( functionNum==RELEASE_INODE ) then
    //print "rel inode";
    alias index R2;
    alias pid R3;
    if([FILE_STATUS_TABLE +4*index]!=pid)then
        R0=-1;
        return;
    endif;
    [FILE_STATUS_TABLE +4*index]=-1;
    [FILE_STATUS_TABLE +4*index+1]=-1;
    alias i R4;
    i=0;
    while(i<MAX_PROC_NUM)do
        if([PROCESS_TABLE +(16*i) + 4]==WAIT_FILE &&[PROCESS_TABLE +16*i + 5]==index)then
            [PROCESS_TABLE +(16*i) + 4]=READY;
        endif;
        i=i+1;
    endwhile;
    R0=0;
    return;
endif ;

if( functionNum==ACQUIRE_BUFFER ) then
    alias buffno R2;
    alias pid R3;
    while([BUFFER_TABLE + 4*buffno + 2]!=-1)do

        [PROCESS_TABLE + 16*pid +4]=WAIT_BUFFER;
        [PROCESS_TABLE + 16*pid +5]=buffno;
        multipush(R0,R1,R2,R3);
        call MOD_5;
        multipop(R0,R1,R2,R3);
    endwhile;
    [BUFFER_TABLE + 4*buffno + 2]=pid;

    return;
endif ;

if( functionNum==RELEASE_BUFFER ) then
    alias buffno R2;
    alias pid R3;

    if([BUFFER_TABLE + 4*buffno + 2]!=pid)then
        R0=-1;
        return;
    endif;

    [BUFFER_TABLE + 4*buffno + 2]=-1;

    alias i R4;
    i=0;
    while(i<MAX_PROC_NUM)do
        if([PROCESS_TABLE +(16*i) + 4]==WAIT_BUFFER &&[PROCESS_TABLE +16*i + 5]==buffno)then
            [PROCESS_TABLE +(16*i) + 4]=READY;
        endif;
        i=i+1;
    endwhile;
    R0=0;
    return;
endif ;