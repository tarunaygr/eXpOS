//print "scheduler";
alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];
multipush (BP);
alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;

[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;

alias i R10;
alias newPID R2;
i=currentPID+1;

while( 1==1 ) do
    if(i>15) then
        i=0;
    endif;
    if(i==currentPID) then
        newPID=0;
        break;
    endif;
    if( [PROCESS_TABLE + i * 16 + 4]== CREATED || [PROCESS_TABLE + i * 16 + 4]== READY ) then
        newPID=i;
        break;
    else
        i=i+1;
    endif ;
endwhile ;

alias new_process_table R3;
new_process_table = PROCESS_TABLE + newPID * 16;

//Set back Kernel SP, PTBR , PTLR
SP =  [new_process_table + 11] * 512 + [new_process_table + 12] ;
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];

[SYSTEM_STATUS_TABLE + 1] = newPID;
//print "New pid";
//print newPID;
breakpoint;
if([new_process_table + 4] == CREATED) then
    [new_process_table + 4] = RUNNING;
	BP=[[new_process_table+11]*512];
    SP = [new_process_table + 13];
    [new_process_table+9]=0;
    
    ireturn;
endif;
[new_process_table + 4] = RUNNING;
multipop(BP);
return;