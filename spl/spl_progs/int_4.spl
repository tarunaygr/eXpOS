alias UStack R10;
UStack=SP;

alias syscallno R11;
alias i R9;
syscallno = [[PTBR + 2 * ((UStack - 5) / 512)] * 512 + ((UStack - 5) % 512)];
[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+13]=SP;
SP=[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+11]*512-1;
alias returnvalue R12;
returnvalue = ([PTBR + 2 * ((UStack - 1) / 512)] * 512) + ((UStack - 1) % 512);

alias a1 R13;
a1 = ([PTBR + 2 * ((UStack - 4) / 512)] * 512) + ((UStack - 4) % 512);

alias a2 R14;
a2 = ([PTBR + 2 * ((UStack - 3) / 512)] * 512) + ((UStack - 3) % 512);

if( syscallno==INT_CREATE ) then
   
    [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=1;
    i=MAX_FILE_NUM-1;
    while( i>-1 ) do
        if([INODE_TABLE+(i*16)+1]==[a1]&&[INODE_TABLE+(i*16)]==DATA) then
            [returnvalue]=0;
            call exit;
        endif ;
        if([INODE_TABLE+(i*16)+1]==-1 ) then
            R6=i;
        endif ;
        i=i-1;
    endwhile;
    i=R6;
    if( i<0 ) then
        [returnvalue]=-1;
        call exit;
    endif ;

    R4=INODE_TABLE+(i*16);
    [R4+1]=[a1];
    [R4+0]=DATA;
    [R4+2]=0;
    [R4+8]=-1;
    [R4+9]=-1;
    [R4+10]=-1;
    [R4+11]=-1;
    [R4+3]=[PROCESS_TABLE + (16*[SYSTEM_STATUS_TABLE+1])+3];
    [R4+4]=[a2];
    R5=ROOT_FILE + 8*i; 
    [R5+0]=[a1];
    [R5+1]=0;
    [R5+2]=DATA;
    [R5+3]=[USER_TABLE + 2*i];
    [R5+4]=[a2];

    [returnvalue]=0;
    call exit;
endif ;



if( syscallno==INT_DELETE ) then

    [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=4;
    alias index R7;
    i=0;
    while( i<MAX_FILE_NUM ) do
        if([INODE_TABLE+(i*16)+1]==[a1]) then
            index=i;
            break;
        endif ;
        i=i+1;
        if( i==MAX_FILE_NUM ) then
            print "Not found";
            [returnvalue]=0;
            call exit;
        endif ;
    endwhile;

    if( [INODE_TABLE+(index*16)+4]==EXCLUSIVE  ) then
        if( ([PROCESS_TABLE + (16*[SYSTEM_STATUS_TABLE+1])+3]!=1 &&[PROCESS_TABLE + (16*[SYSTEM_STATUS_TABLE+1])+3]!=[INODE_TABLE+(index*16)+3])) then
            print "Not allowed";
            [returnvalue]=-1;
            call exit;
        endif ;
    endif ;

    if(  [INODE_TABLE+(index*16)]!=DATA ) then
        print "Not allowed";
        [returnvalue]=-1;
        call exit;
    endif ;

    backup;
    R1=ACQUIRE_INODE;
    R2=index;
    R3=[SYSTEM_STATUS_TABLE+1];
    call MOD_0;
    restore;

    if( [FILE_STATUS_TABLE + (index*4) + 1]!=-1 ) then
        call release;
        print "File closed";
        [returnvalue]=-2;
        call exit;
    endif ;

    i=8;
    while( i<12 ) do
        if( [INODE_TABLE+(index*16)+i]!=-1 ) then
            if([BUFFER_TABLE +((i%4)*4)+1]==1)then
                [BUFFER_TABLE +((i%4)*4)+1]=0;
            endif;
            backup;
            R1=RELEASE_BLOCK;
            R2=[INODE_TABLE+(index*16)+i];
            call MOD_2;
            restore;
        endif ;
       
        i=i+1;
    endwhile ;
    [ROOT_FILE + 8*index +0]=-1;
    [ROOT_FILE + 8*index +1]=-1;
    [ROOT_FILE + 8*index +2]=-1;
    [ROOT_FILE + 8*index +0]=-1;
    [ROOT_FILE + 8*index +0]=-1;
    i=0;
    while( i<12 ) do
        [INODE_TABLE+(index*16)+i]=-1;
        i=i+1;
    endwhile ;
    [returnvalue]=0;
    call exit;

endif ;

release:
    backup;
    R1=RELEASE_INODE;
    R2=R7;
    R3=[SYSTEM_STATUS_TABLE+1];
    call MOD_0;
    restore;
    return;

exit:
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
SP=[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+13];
ireturn;