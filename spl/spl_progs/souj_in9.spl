alias PID R5;
alias pte R6;
alias userSP R7;
alias fileName R8;
alias inodeIndex R9;
alias i R13;

PID = [SYSTEM_STATUS_TABLE+1];
pte = PROCESS_TABLE+PID*16;

userSP = SP;

[pte + 13] = SP;          // UPTR
SP = [pte + 11]*512 - 1;  // UArePage*512 - 1;
[pte + 9] = 9;            // MODE = SYSCALL 9

fileName=[([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 4) % 512)];


i = 0;
while(i<MAX_FILE_NUM)
do
    if([INODE_TABLE+i*16+1] == fileName)
    then
        break;
    endif;
    i = i+1;
endwhile;

if( (i==MAX_FILE_NUM) || ([INODE_TABLE+i*16+0] != EXEC) )
then
    [([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)] = -1;
    [pte + 9] = 0;            // MODE = No Syscall
    SP = [pte + 13];
    ireturn;
endif;
inodeIndex = i;

R1 = EXIT_PROCESS;
R2 = PID;
call PROCESS_MANAGER;

[MEMORY_FREE_LIST + [pte + 11]] = [MEMORY_FREE_LIST + [pte + 11]] + 1;
[SYSTEM_STATUS_TABLE+2] = [SYSTEM_STATUS_TABLE+2] - 1;

SP = [pte + 11]*512 - 1;
[pte + 4] = RUNNING;
i = 0;
while(i<10)
do
    [PAGE_TABLE_BASE + PID*20 + 2*i] = -1;
    [PAGE_TABLE_BASE + PID*20 + 2*i + 1] = "0000";
    i = i + 1;
endwhile;
// Load library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Dont load heap yet
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

// Stack
R1 = GET_FREE_PAGE;
call MEMORY_MANAGER;
[PTBR+16] = R0;
[PTBR+17] = "0110";
R1 = GET_FREE_PAGE;
call MEMORY_MANAGER;
[PTBR+18] = R0;
[PTBR+19] = "0110";

//clear the disk tanle
i = 0;
while(i<10)
do
    [DISK_MAP_TABLE + PID*10 + i] = -1;
    i = i + 1;
endwhile;
i = 0;
while( (i<= ([INODE_TABLE+ inodeIndex*16 + 2])/PAGE_SIZE) && (i<4))
do
    
    [DISK_MAP_TABLE + PID*10 + 4 + i] = [INODE_TABLE + inodeIndex*16 + 8+i];
    i = i+1;
endwhile;

i = 0;


R1 = GET_CODE_PAGE;
R2 = [DISK_MAP_TABLE + PID*10 + 4];
call MEMORY_MANAGER;
[PTBR + 8] = R0;
[PTBR + 9] = "0100";
R12 = i;
// Code


[[PTBR+16]*512] = [[PTBR+8]*512 + 1];
SP = 8*512;


[pte + 9] = 0;            // MODE = No Syscall
ireturn;
