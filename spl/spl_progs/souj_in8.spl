alias childpid R10;
alias pid R11;
alias psp R12;
alias retpt R13;
alias pcbc R8;
alias pcbp R7;
alias i R6;
alias j R9;
alias k R5;

////////////////////////////////////
//  r2 r3 r4 for copy page        //
//  r14 and r15  r1 for func ltv  //
//  temp variables                //
////////////////////////////////////

pid = [SYSTEM_STATUS_TABLE+1];
psp = SP;

//print("infork");

//----------------------------------------------------------------------switching to kernel stack---------------------------------

[PROCESS_TABLE+ pid*16 + 9] = 8;                                    // set mode as syscall
[PROCESS_TABLE+ pid*16 + 13] = SP;                                  // set UPTR
SP = [PROCESS_TABLE + pid*16 + 11]*512 -1;                          // set it to kernel stack


R14 = psp -1;
R15 = pid;
call ltv;
retpt = [R1];

//-------------------------------------------------------------------Allocate memory and set the Process Table------------------

multipush( R7, R8, R10, R11, R12,R13);
R1 = GET_PCB_ENTRY;
call PROCESS_MANAGER;
multipop( R7, R8, R10, R11, R12,R13);
childpid = R0;

//if there is no free GET_PCB_ENTRY
if(childpid == -1) then
    //return address
    retpt = -1;
    [PROCESS_TABLE + pid*16 + 9] = 0;
    //[PROCESS_TABLE + pid*16 + 13] = SP;
    SP = [PROCESS_TABLE + pid*16 + 13];
    ireturn;
endif;

//print("1");
//------------------------------------------------------------------- if heap isnt allocated then get stuff ----------------

if([PTBR + 2*2] == -1) then
    multipush( R7, R8, R10, R11, R12,R13);
    R1 = GET_FREE_PAGE;
    call MEMORY_MANAGER;
    multipop( R7, R8, R10, R11, R12,R13);

    [PTBR + 4 + 0] = R0;
    [PTBR + 4 + 1] = "1110";

    multipush( R7, R8, R10, R11, R12,R13);
    R1 = GET_FREE_PAGE;
    call MEMORY_MANAGER;
    multipop( R7, R8, R10, R11, R12,R13);

    [PTBR + 6 + 0] = R0;
    [PTBR + 6 + 1] = "1110";
endif;

//--------------------------------------------------------- get free page to get 2 for stack and 1 userarea page---------------------

pcbc = PROCESS_TABLE + childpid*16;
pcbp = PROCESS_TABLE + pid*16;
// /print("2");
//-------------------------------------------------------UserAreaPage is allocated----------------------------------------

multipush( R7, R8, R10, R11, R12,R13);
//print("going to");
R1 = GET_FREE_PAGE;
call MEMORY_MANAGER;
//print("here");
multipop( R7, R8, R10, R11, R12,R13);
print("3");
[pcbc + 11] = R0;

[pcbc + 3] = [pcbp + 3];                //USERID

[pcbc + 6] = [pcbp + 6];                //swap flag

[pcbc + 7] = [pcbp + 7];                //Indode index

[pcbc + 10] = [pcbp + 10];              //user area swap status
[pcbc + 13] = [pcbp + 13];              //UPTR

[pcbc + 0] = 0;                         //Tick
[pcbc + 2] = pid;                       //ppid
[pcbc + 4] = CREATED;                   //state
[pcbc + 9] = 0;                         //mode
[pcbc + 12] = 0;                        //KPTR
//print("3");
//-----------------------------------------------------COPY PER PROCESS DISK MAP Table---------------------------------
i = 0;
while (i < 10) do
    [DISK_MAP_TABLE + childpid*10 + i] = [DISK_MAP_TABLE + pid*10 + i];
    i = i + 1;
endwhile;
//print("4");
//-----------------------------------------------------Initialise the page Table------------------------------
//Share every page exvept the stack page
i = 0;

while(i < 8) do
    j = PAGE_TABLE_BASE +  childpid*20 + i*2;
    k = PAGE_TABLE_BASE +  pid*20 + i*2;
    [j] = [k];
    [j+1] = [k+1];
    
    //Increase the shared count
    [MEMORY_FREE_LIST + [k]] = [MEMORY_FREE_LIST + [k]] + 1;
    i = i + 1;
endwhile;
//breakpoint;
i = 496;
// ---------------------------------------------Semaphore table copyy----------------------------------------------
while(i < 511) do
	j = [pcbp + 11]*512 + i;

	[[pcbc + 11]*512 + i] = [j];
	[[pcbc + 11]*512 + i + 1] = [j + 1];

// -------------------------------------OPEN INSTANCE COUNT IS ONLY INCREMENTE 

	if([j] == SEMAPHORE) then		//incrementing shared count in SEM_TAB
		[SEMAPHORE_TABLE  + 4*[j + 1] + 1] = [SEMAPHORE_TABLE  + 4*[j + 1] + 1] + 1;	//>>>>!!!!ERROR_PRONE!!!! CHECK ONCE<<<<<
	endif;

	if([j] == FILE) then			//incrementing shared open instance count in OPN_FIL_TAB
		[OPEN_FILE_TABLE  + 4*[j + 1] + 1] = [OPEN_FILE_TABLE  + 4*[j + 1] + 1] + 1;	//>>>>!!!!ERROR_PRONE!!!! CHECK ONCE<<<<<
	endif;

i = i + 2;
endwhile;
//print("5");
//--------------------------------------------------Allocate the stack pages ----------------------------------------------
multipush( R7, R8, R10, R11, R12,R13);
R1 = GET_FREE_PAGE;
call MEMORY_MANAGER;
multipop( R7, R8, R10, R11, R12,R13);

[PAGE_TABLE_BASE +  childpid*20 + 8*2 + 0] = R0;
[PAGE_TABLE_BASE +  childpid*20 + 8*2 + 1] = "0110";
//print(R0);
multipush( R7, R8, R10, R11, R12,R13);
R1 = GET_FREE_PAGE;
call MEMORY_MANAGER;
multipop( R7, R8, R10, R11, R12,R13);

[PAGE_TABLE_BASE +  childpid*20 + 9*2 + 0] = R0;
[PAGE_TABLE_BASE +  childpid*20 + 9*2 + 1] = "0110";

//-------------------------------------------------COPY user stack content from parent to child----------------------
//print("6");
//-------------------------------------------------get the virtual address of the stack page and convert into physical address

R2 = pid;
R3 = childpid;
R4 = 8;
call  copypage;

R2 = pid;
R3 = childpid;
R4 = 9;
call  copypage;

//print("7");
//------------------------------ According to the ExpL calling convention, the BP register is not saved in the user stack. 
//------------------------------This value is saved here so that the context switch module can restore it when the child is run. */
   
[[PROCESS_TABLE + childpid*16 + 11]*512] = BP;      



R14 = [PROCESS_TABLE + childpid*16 + 13] - 1;
R15 = childpid;
call ltv;
//print(R1);
[R1] = 0;



//print(psp);
R14 = psp -1;
R15 = pid;
call ltv;

[R1] = childpid;
[PROCESS_TABLE + pid*16 + 9] = 0;
SP = [PROCESS_TABLE + pid*16 + 13];

ireturn;
//---------------------------------------------function to copy words of a page--------------------------------------------------------
copypage:
    R14 = R4*512;
    R15 = R2;
    call ltv;
    j = R1;
    R14 = R4*512;
    R15 = R3;
    call ltv;
    k = R1;
    i = 0;
    while( i < 512) do
        [k + i] = [j + i];
        i = i + 1;
    endwhile;
    return;


ltv:
    i = R14/512;
    i = [PAGE_TABLE_BASE + R15*20 + 2*i];
    R1 = (i*512) + (R14%512);
    return;